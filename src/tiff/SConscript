# $Id: SConstruct,v 1.2 2006/03/23 14:54:00 dron Exp $

# Tag Image File Format (TIFF) Software
#
# Copyright (C) 2005, Andrey Kiselev <dron@ak4719.spb.edu>
#
# Permission to use, copy, modify, distribute, and sell this software and 
# its documentation for any purpose is hereby granted without fee, provided
# that (i) the above copyright notices and this permission notice appear in
# all copies of the software and related documentation, and (ii) the names of
# Sam Leffler and Silicon Graphics may not be used in any advertising or
# publicity relating to the software without the specific, prior written
# permission of Sam Leffler and Silicon Graphics.
# 
# THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
# WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
# 
# IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
# ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
# LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
# OF THIS SOFTWARE.

Import(['env'])

env = env.Clone()

sources = [
    'tif_aux.c',
    'tif_close.c',
    'tif_codec.c',
    'tif_color.c',
    'tif_compress.c',
    'tif_dir.c',
    'tif_dirinfo.c',
    'tif_dirread.c',
    'tif_dirwrite.c',
    'tif_dumpmode.c',
    'tif_error.c',
    'tif_extension.c',
    'tif_fax3.c',
    'tif_fax3sm.c',
    'tif_flush.c',
    'tif_getimage.c',
    'tif_jpeg.c',
    'tif_luv.c',
    'tif_lzw.c',
    'tif_next.c',
    'tif_ojpeg.c',
    'tif_open.c',
    'tif_packbits.c',
    'tif_pixarlog.c',
    'tif_predict.c',
    'tif_print.c',
    'tif_read.c',
    'tif_strip.c',
    'tif_swab.c',
    'tif_thunder.c',
    'tif_tile.c',
    'tif_version.c',
    'tif_warning.c',
    'tif_write.c',
    'tif_zip.c',
]

if env['platform'] == 'windows':
    sources += ['tif_win32.c']

    env.Append(CPPDEFINES = [
        ('inline', '__inline'),
    ])
elif env['platform'] == 'darwin':
    sources += ['tif_apple.c']
    env.Prepend(CPPPATH = ['/Developer/Headers/FlatCarbon'])
else:
    sources += ['tif_unix.c']

def Define(context, key, have):
    import SCons.Conftest
    SCons.Conftest._Have(context, key, have)

def CheckCustomOption(context, name):
    context.Message('Checking is the ' + name + ' option set... ')
    ret = True
    Define(context, name + '_SUPPORT', ret)
    context.Result(ret)
    return ret

def CheckFillorderOption(context):
    context.Message('Checking for the native cpu bit order... ')
    if True: # FIXME
        Define(context, 'HOST_FILLORDER', 'FILLORDER_LSB2MSB')
        context.Result('lsb2msb')
    else:
        Define(context, 'HOST_FILLORDER', 'FILLORDER_MSB2LSB')
        context.Result('msb2lsb')
    return 1

def CheckIEEEFPOption(context):
    context.Message('Checking for the IEEE floating point format... ')
    Define(context, 'HAVE_IEEEFP', 1)
    context.Result(1)
    return 1

def CheckOtherOption(context, name):
    context.Message('Checking is the ' + name + ' option set... ')
    ret = True
    Define(context, 'HAVE_' + name, ret)
    context.Result(ret)
    return ret

custom_tests = {
    'CheckCustomOption' : CheckCustomOption,
    'CheckFillorderOption' : CheckFillorderOption,
    'CheckIEEEFPOption' : CheckIEEEFPOption,
    'CheckOtherOption' : CheckOtherOption
    }
conf = Configure(env, custom_tests = custom_tests, config_h = 'tif_config.h')

# Check for standard library
conf.CheckLib('c')
if False: # FIXME
    conf.CheckLib('m')

# Check for system headers
conf.CheckCHeader('assert.h')
conf.CheckCHeader('fcntl.h')
conf.CheckCHeader('limits.h')
conf.CheckCHeader('malloc.h')
conf.CheckCHeader('search.h')
conf.CheckCHeader('sys/time.h')
conf.CheckCHeader('unistd.h')
conf.CheckCHeader('string.h')

# Check for standard library functions
conf.CheckFunc('floor')
conf.CheckFunc('isascii')
conf.CheckFunc('memmove')
conf.CheckFunc('memset')
conf.CheckFunc('mmap')
conf.CheckFunc('pow')
conf.CheckFunc('sqrt')
conf.CheckFunc('strchr')
conf.CheckFunc('strrchr')
conf.CheckFunc('strstr')
conf.CheckFunc('strtol')

conf.CheckFillorderOption()
conf.CheckIEEEFPOption()
conf.CheckCustomOption('ccitt')
conf.CheckCustomOption('packbits')
conf.CheckCustomOption('lzw')
conf.CheckCustomOption('thunder')
conf.CheckCustomOption('next')
conf.CheckCustomOption('logluv')
conf.CheckOtherOption('strip_chopping')
conf.CheckOtherOption('extrasample_as_alpha')
conf.CheckOtherOption('check_ycbcr_subsampling')

env = conf.Finish()

tiff = env.StaticLibrary('tiff', sources)

Export('tiff')
